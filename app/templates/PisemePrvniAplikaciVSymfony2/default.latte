
{block content}

<div id="middle-page">

<h1>Píšeme první aplikaci v Symfony2</h1>	
    <p>V tomto článku si ukážeme, jakým způsobem můžeme v Symfony2 vytvořit naši první aplikaci v podobě jednoduchého blogu
       s&nbsp;komentáři. 
       Symfony2 framework vychází z návrhového vzoru MVC a za jeho vývojem stojí firma Sensio Labs.
       Více se o frameworku dozvíte přímo na stránce <a href="http://symfony.com/" title="Symfony2" target="_blank">symfony.com</a>.
       Na závěr ještě doplním, co všechno budeme potřebovat:
    </p>
    <ul>
        <li>povědomí o tom, jak funguje MVP/MVC architektura</li>
        <li>základní znalost OOP, PHP a nejlépe i nějakého ORM (Object-Relational Mapping) nad databází</li>
        <li>vývojové prostředí (Xampp, Lamp)</li>
    </ul>

    <h3>Instalujeme Symfony2</h3>
    <p>Nejprve si nainstalujeme Symfony2 framework &#8211; odkaz pro stažení je
        <a href="http://symfony.com/download" title="Symfony2: download" target="_blank">zde</a>.
       Nejjednodušší je provést instalaci přes <span class="i">Composer</span>. Pokud jste s Composerem nikdy nepracovali,
       můžete si stáhnout zazipovanou verzi, ale určitě doporučuji se na Composer podívat.
       Symfony2 framework si umístíme do kořenového adresáře našeho projektu.
       Na Windows používám <code>xampp</code>, takže v <code>htdocs</code> mám vytvořenou složku <code>web</code> a tam mám
       jednotlivé projekty. Moje adresářová struktura vypadá takto:
    </p>	
    <pre>
.../
  xampp/
    htdocs/
      web/
        blog/
          app/
          ...
          web/
            app_dev.php</pre>
		
    <p>Adresa pro zobrazení na localhostu potom bude ve tvaru <code>http://localhost/web/blog/web/app_dev.php</code>.<br />
       Tam by se nám měla zobrazit uvodní stránka Symfony2 frameworku. Stránku <code>app_dev.php</code> musíme zadat.
    </p>
    <img src="{$basePath}/images/symfony2.jpg" title="Symfony2 demo page" width="600" height="421" class="center" />
    <p>
    Základním stavebním kamenem je tzv. „bundle“, což je adresář, ve kterém se nachází naše aplikace.
    Instalace implicitně zahrnuje DemoBundle, který je umístěn ve složce <code>src/Acme</code>, a to včetně ukázkových příkladů
    &#8211; viz sekce <a href="http://symfony.com/get-started" title="Symfony2: Get started" target="_blank">Get Started</a>.<br />
    Pro představu zde uvedu, jakým způsobem si můžeme inicializovat proměnnou v controlleru a&nbsp;jakým způsobem ji následně
    předáme do šablony:
    </p>
    <pre>
public function indexAction()
{	
    $var = 'my variable';	
    return $this->render('AcmeDemoBundle:Welcome:index.html.twig',
        array('variable' => $var));
}</pre>
	
    <p>Již z této ukázky vidíme, že Symfony2 používá <code>twig</code> šablonovací systém. Dokumentace je dostupná
        <a href="http://twig.sensiolabs.org/" title="Twig" target="_blank">tady</a>.
       Výše uvedenou proměnnou si tedy v šabloně vypíšeme jako:</p>
    <pre>{{ variable }}</pre>
    <p>
    Pokud si pro změnu v controlleru definujeme pole:
    </p>

    <pre>
public function indexAction()
{
    $array = array(
        'foo' => 'bar',
        'bar' => 'foo',
        'name' => 'Desmond',
        'surname' => 'Cousland'
    );

    return $this->render('AcmeBlogBundle:Blog:index.html.twig', array(
        'array' => $array
    ));		
}</pre>

    <p>Tak ho v šabloně můžeme vypsat tímto způsobem:</p>
    <pre>
<?php echo '{'; ?>% for item in array %<?php echo '}'; ?>

  &lt;p&gt;<?php echo '{'; ?><?php echo '{'; ?> item <?php echo '}'; ?><?php echo '}'; ?>&lt;/p&gt;
<?php echo '{'; ?>% endfor %<?php echo '}'; ?>
		</pre>

    <p>
    Nebo pokud nás bude zajímat jednom hodnota „name“:
    </p>
    <pre>{{ array.name }}</pre>
    <p>Více informací o práci se šablonami najdete v <a href="http://symfony.com/doc/current/book/templating.html"
       title="Symfony2: Creating and using Templates" target="_blank">dokumentaci</a> k Symfony2 frameworku. Nyní se již
       vrhneme na zmíněný blog.</p>
		

    <h2>Vytváříme jednoduchý blog</h2>
    <p>Jako ukázkovou aplikaci zvolím jednoduchý blog, který bude umožňovat vkládání komentářů k&nbsp;jednotlivým příspěvkům.</p>

    <h3>BlogBundle</h3>
    <p>Pro aplikaci si z příkazové řádky vygenerujeme vlastní bundle, který si pojmenuji jako <code>BlogBundle</code>.
        Bundle si umístím do nově vytvořené složky <code>pds</code> ve složce <code>src</code>. 
        Pak pomocí níže uvedeného příkazu si spustíme Symfony2 bundle generátor, v příkazovém řádku se nacházím ve složce
        <code>...\xampp\htdocs\web\blog</code>.
    </p>
    <pre>php app/console generate:bundle --namespace=pds/BlogBundle --format=yml</pre>

    <p>
    Tento postup nám vytvoří požadovanou strukturu. Pokud jsme použili pro vytvoření nového bundlu výchozí nastavení,
    bude potřeba upravit některé soubory. Zároveň se nám automaticky vygeneroval také <code>DefaultController</code>, který si přejmenuji
    na <code>BlogController</code>, takže rovnou zohledním i tuto změnu.
    Pro zobrazení stránky musíme mít správně nastavené routy, proto nejprve soubor <code>routing.yml</code>
    v&nbsp;adesáři <code>src/pds/BlogBundle/Resources/Config</code> upravím tímto způsobem:
    </p>
    <pre>pds_blog_homepage:
    pattern: /
    defaults: { _controller: pdsBlogBundle:Blog:index }</pre>
    <p>Nyní změníme controller <code>pds/BlogBundle/Controller/BlogController.php</code>.</p>
    <pre>class BlogController extends Controller
{
    public function indexAction()
    {
        return $this->render('pdsBlogBundle:Blog:index.html.twig');
    }
}</pre>

    <p>A nakonec šablonu <code>pds/BlogBundle/Resources/views/Blog/index.html.twig</code>, do které vložíme html kód:</p>
    <pre>
&lt;html&gt;
  &lt;body&gt;
    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre>
		
    <p>Nyní si zobrazíme stránku na localhostu <code>http://localhost/web/blog/web/app_dev.php/</code>.
    Měli bychom vidět prázdnou stránku
    s textem <span class="i">Lorem ipsum dolor sit amet, consectetur adipiscing elit</span>.
    Dole na stránce se nachází Symfony2 toolbar. V toolbaru máme základní informace o stránce, takže si
    můžeme všimnout, že pro načtení stránky byla použita routa s názvem pds_blog_homepage a že se z BlogControlleru vykonala
    akce indexAction. Dále tam najdeme informace o verzi frameworku, PHP, počet a typ vykonaných dotazů nad databází a další ladicí informace.
    </p>


<h3>Šablonovací systém Twig</h3>
<p>Nyní si doplníme kompletní html strukturu stránky. Do složky <code>Resources/views</code> v <code>src/pds/BlogBundle</code> přidáme novou
šablonu <code>layout.html.twig</code>, kde
se již podle názvu bude nacházet výchozí layout stránky. V&nbsp;podstatě se jedná o vzor layoutu ze souboru <code>base.html.twig</code>, který
je umístěný v <code>app/Resources/views</code>.
Část <code>content</code> pak vyčlením pro vlastní obsah.
<pre>
<?php echo'{'?># src/pds/BlogBundle/Resources/views/layout.html.twig #<?php echo'}'?>

&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
    &lt;title&gt;<?php echo "{" ?>% block title %<?php echo "}" ?>Můj blogísek<?php echo "{" ?>% endblock %<?php echo "}" ?>&lt;/title&gt;
    <?php echo "{" ?>% block stylesheets %<?php echo "}" ?><?php echo "{" ?>% endblock %<?php echo "}" ?>

    &lt;link rel="icon" type="image/x-icon" href="<?php echo "{" ?><?php echo "{" ?> asset('favicon.ico') <?php echo "}" ?><?php echo "}" ?>" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    <?php echo "{" ?>% block content %<?php echo "}" ?><?php echo "{" ?>% endblock %<?php echo "}" ?>

    <?php echo "{" ?>% block javascripts %<?php echo "}" ?><?php echo "{" ?>% endblock %<?php echo "}" ?>

  &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>V dalším kroku si upravíme šablonu <code>index.html.twig</code>, kterou máme ve složce <code>Blog</code>.
   Odebereme tagy, které již máme v layoutu a&nbsp;přidáme část <code>extends</code>, která nám zajistí to, že šablona bude dědit
   náš layout stránky. Tady upozorním na to, že <code><?php echo "{" ?>% extends %<?php echo "}" ?></code> musí být prvním tagem v šabloně.
</p>
<pre>
<?php echo'{'?># src/pds/BlogBundle/Resources/views/Blog/index.html.twig #<?php echo'}'?>

<?php echo "{" ?>% extends "pdsBlogBundle::layout.html.twig" %<?php echo "}" ?>

<?php echo "{" ?>% block content %<?php echo "}" ?>

    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit&lt;/p&gt;
<?php echo "{" ?>% endblock %<?php echo "}" ?>
</pre>

<p>Pokud si nyní zkusíme znovu načíst stránku, tak se sice na pohled mnoho nezměnilo, ale stránka už má svůj kompletní html kabát
a v titulku máme umístěn text „Můj blogísek“.</p>


<h3>Vložení stylu</h3>
<p>Pro testovací účely si připravím jednoduchou definici stylu:</p>
<pre>body <?php echo'{'?> background-color: whitesmoke; <?php echo'}'?></pre>

<p>Tento styl si pojmenuji jako <code>blog.css</code>. Pokud se nyní podívám na strukturu aplikace, tak budu chtít,
aby styl byl součástí bundlu. Pro umístění stylu si tedy vytvoříme následující adresářovou
strukturu:</p>
<pre>src/pds/BlogBundle/Resources/public/css/blog.css</pre>

<p>Provizorní styl máme, akorát ho potřebujeme vložit do html souboru.
Pro vložení stylu využijeme tzv. <span class="i">assety</span>, což je označení pro soubory typu CSS, JavaScript a
obrázky, které vkládáme do html. Na BlogBundle se v tomto případě odkážeme pomocí aliasu <code>@pdsBlogBundle</code>.
Šablonu <code>layout.html.twig</code> proto upravíme tímto způsobem:</p>
<pre>
<?php echo'{'?># src/pds/BlogBundle/Resources/views/layout.html.twig #<?php echo'}'?>

...
&lt;head&gt;
  &lt;meta charset="UTF-8" /&gt;
  &lt;title&gt;<?php echo "{" ?>% block title %<?php echo "}" ?>Můj blogísek<?php echo "{" ?>% endblock %<?php echo "}" ?>&lt;/title&gt;
  <?php echo "{" ?>% stylesheets '@pdsBlogBundle/Resources/public/css/blog.css' %<?php echo "}" ?>

    &lt;link rel="stylesheet" href="<?php echo "{" ?><?php echo "{" ?> asset_url <?php echo "}" ?><?php echo "}" ?>" /&gt;
  <?php echo "{" ?>% endstylesheets %<?php echo "}" ?>

  &lt;link rel="icon" type="image/x-icon" href="<?php echo "{" ?><?php echo "{" ?> asset('favicon.ico') <?php echo "}" ?><?php echo "}" ?>" /&gt;
&lt;/head&gt;
</pre>

<p>Nakonec ještě musíme přidat náš bundle do assetic bundlu &#8211; to provedeme přímo v konfiguračním souboru <code>app/config/config.yml</code>.</p>
<pre>
# Assetic Configuration
assetic:
    ...
    use_controller: false
    bundles:        [ 'pdsBlogBundle' ]
</pre>

<p>
Více informací je možné najít v <a href="http://symfony.com/doc/current/cookbook/assetic/asset_management.html"
title="How to Use Assetic for Asset Management" target="_blank">dokumentaci</a> popř. i na serveru
<a href="http://stackoverflow.com/questions/10376946/assetic-unable-to-find-file" title="stackoverflow.com" target="_blank">stackoverflow.com</a>.
Styl nám funguje, takže nyní si doplním základní kostru stylu a upravím příslušné šablony. Styl je k dispozici TADY.<br /><br />
</p>


<p>Šablona layout.html.twig</p>
<pre>
<?php echo '{'; ?># src/pds/BlogBundle/Resources/views/layout.html.twig #<?php echo '}'; ?>

&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
    &lt;title&gt;<?php echo "{" ?>% block title %<?php echo "}" ?>Můj blogísek<?php echo "{" ?>% endblock %<?php echo "}" ?>&lt;/title&gt;
    <?php echo "{" ?>% stylesheets '@pdsBlogBundle/Resources/public/css/blog.css' %<?php echo "}" ?>

    &lt;link rel="stylesheet" href="<?php echo "{" ?><?php echo "{" ?> asset_url <?php echo "}" ?><?php echo "}" ?>" /&gt;
    <?php echo "{" ?>% endstylesheets %<?php echo "}" ?>

    &lt;link rel="icon" type="image/x-icon" href="<?php echo "{" ?><?php echo "{" ?> asset('favicon.ico') <?php echo "}" ?><?php echo "}" ?>" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="page"&gt;
      &lt;div id="top-menu"&gt;&lt;/div&gt;
      &lt;div id="left-page"&gt;
        <?php echo "{" ?>% block menu %<?php echo "}" ?>

        <?php echo "{" ?>% endblock %<?php echo "}" ?>

      &lt;/div&gt;
      &lt;div id="middle-page"&gt;  
        <?php echo "{" ?>% block content %<?php echo "}" ?><?php echo "{" ?>% endblock %<?php echo "}" ?>

        <?php echo "{" ?>% block javascripts %<?php echo "}" ?><?php echo "{" ?>% endblock %<?php echo "}" ?>

      &lt;/div&gt;    &lt;!-- END middle-page --&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Šablona index.html.twig</p>
<pre>
<?php echo '{'; ?># src/pds/BlogBundle/Resources/views/Blog/index.html.twig #<?php echo '}'; ?>

<?php echo "{" ?>% extends "pdsBlogBundle::layout.html.twig" %<?php echo "}" ?>

<?php echo "{" ?>% block menu %<?php echo "}" ?>

  &lt;ul&gt;
    &lt;li class="title"&gt;Nejnovější&lt;/li&gt;
    &lt;li&gt;&lt;a href=""&gt;Lorem Ipsum&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=""&gt;De Finibus Bonorum...&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
<?php echo "{" ?>% endblock %<?php echo "}" ?>

<?php echo "{" ?>% block content %<?php echo "}" ?>

  &lt;div class="article"&gt;
    &lt;h1&gt;Lorem Ipsum&lt;/h1&gt;
    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit ... 
          &lt;a href="" title=""&gt;celý článek&lt;/a&gt;&lt;/p&gt;
    &lt;p class="date"&gt;Přidáno: 19.10.2013 v 18:42&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;h1&gt;De Finibus Bonorum et Malorum&lt;/h1&gt;
    &lt;p&gt;Sed nibh velit, porttitor nec arcu at, porttitor bibendum nunc. Vivamus nec eros ac
       odio porttitor rhoncus non eu massa. Pellentesque dignissim est et elit lobortis luctus.
       Donec consequat nibh sit amet orci aliquam, sed elementum eros posuere. Morbi iaculis
       fringilla nisl, mattis tempor tortor posuere in. Nulla et venenatis augue. Suspendisse
       volutpat justo eu risus lobortis, quis lobortis nulla ornare. Aliquam erat volutpat.
       Praesent ut nunc felis. Etiam tincidunt dolor ac nisl congue, eu molestie ante venenatis.
       Curabitur at risus ... &lt;a href="seznam.cz" title=""&gt;celý článek&lt;/a&gt;&lt;/p&gt;
    &lt;p class="date"&gt;Přidáno: 17.10.2013 v 22:05&lt;/p&gt;
  &lt;/div&gt;
<?php echo "{" ?>% endblock %<?php echo "}" ?>
</pre>


<p>Blog &#8211; návrh</p>
<img src="{$basePath}/images/blog.jpg" alt="blog (návrh)" width="600" height="260" class="center" />

<h2>Navrhujeme model aneb cesta k ORM</h2>
<p>
Dosud ještě nebyla řeč o modelu, takže je na čase postoupit zase o krok dál. Symfony2 v sobě již zahrnuje
knihovnu Doctrine2, kterou využiji i pro tento ukázkový příklad.
Pokud jste dosud dělali jen
s MySQL nebo PDO, tak práce s Doctrine či jiným ORM je zkrátka jiná. O tom, co Doctrine je a jak se používá, vyšel i&nbsp;seriál v češtině na
<a href="http://www.zdrojak.cz/serialy/doctrine-2/" title="doctrine 2" target="_blank">zdrojak.cz</a>.
Doctrine2 využívá návrhový vzor <span class="i">Data Mapper</span> oproti vzoru <span class="i">Active Record</span>,
se kterým jste se již pravděpodobně setkali. Proto předtím,
než se do něčeho pustíte, tak doporučuji si projít minimálně <a href="http://www.zdrojak.cz/clanky/doctrine-2-zakladni-definice-entit/"
title="Doctrine2: Základní definice entit" target="_blank">tento článek</a>, kde se dozvíte, na jakém principu se s Doctrine2 pracuje
a něco o pojetí entit, bez kterých se v Doctrine2 neobejdete.
Místo konceptu Doctrine2 by neměl být problém využít třeba Propel či samotné PDO. 
</p>

<p>
Nejprve si tedy připravíme databázovou strukturu. Vytvořím si novou databázi, kterou pojmenuji jednoduše „blog“ a která bude
obsahovat tabulky pro uložení článků a komentářů.<br /><br />
</p>

<p>Tabulka pro články:</p>
<pre>
CREATE TABLE IF NOT EXISTS `article` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(50) COLLATE utf8_czech_ci NOT NULL,
  `text` text COLLATE utf8_czech_ci NOT NULL,
  `date` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_czech_ci AUTO_INCREMENT=1 ;
</pre>

<p>Tabulka pro komentáře:</p>
<pre>
CREATE TABLE IF NOT EXISTS `comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `text` varchar(2500) COLLATE utf8_czech_ci NOT NULL,
  `nickname` varchar(30) COLLATE utf8_czech_ci NOT NULL,
  `date` datetime NOT NULL,
  `article_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `article_id` (`article_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_czech_ci AUTO_INCREMENT=1 ;
</pre>

<p>Nyní si naplníme tabulku „article“ daty. Vzorová data si můžete stáhnout ZDE. Pro reálné nasazení by bylo potřeba si vytvořit trochu více
sofistikovanější systém, který by nám umožňoval přidávat a&nbsp;editovat jednotlivé články.
My si v této chvíli práci usnadníme a budeme předpokládat, že takový systém již máme.
Základní práci s databází si ukážeme na komentářích.
</p>	

<h3>Nastavení parametrů pro připojení k Doctrine2</h3>

<p>Pro to, abychom se mohli připojit k databázi, potřebujeme provést základní konfiguraci. Při instalaci
přes composer se automaticky vygeneruje také soubor s parametry (<code>parameters.yml</code>), který je uložen ve složce
<code>/app/config/</code>. V souboru si zkontrolujeme výchozí nastavení popř. ho upravíme.
</p>
<pre>
# This file is auto-generated during the composer install
parameters:
    database_driver: pdo_mysql
    database_host: 127.0.0.1
    database_port: null
    database_name: blog
    database_user: root
    database_password: null
    mailer_transport: smtp
    mailer_host: 127.0.0.1
    mailer_user: null
    mailer_password: null
    locale: en
    secret: ThisTokenIsNotSoSecretChangeIt
</pre>

<p>
<!--My nyní musíme upravit soubor <code>config.yml</code>, 
konkrétně část Doctrine configuration a přepíšeme tam původní parametry.-->
Pro první test si v controlleru
<code>BlogController.php</code> provizorně upravíme funkci <code>indexAction()</code> a využijeme službu <code>database_connection</code>:
</p>

<pre>
public function indexAction()
{
	$conn = $this->get('database_connection');
	$rows = $conn->fetchAll('SELECT * FROM article');

	var_dump($rows);

	return $this->render('pdsBlogBundle:Blog:index.html.twig');
}
</pre>

<p>Nicméně výše uvedený postup s využitím vrstvy DBAL (DataBase Abstraction Layer) využívat nebudeme, protože nám jde o mapování
objektů na relační databázi, tedy o vrstvu ORM. Proto si vytvoříme vlastní model postavený na entitách, se kterými Doctrine2 pracuje.
</p>


<h3>Entita jako základní prvek modelu</h3>
<p>Jako první si vytvoříme entitu „Article“, která nám bude definovat samotný článek. V pojetí PHP entitě bude odpovídat
samostatná třída. V adresáři <code>pds/BlogBundle</code> si vytvoříme novou složku „Entity“ a do ní umístíme tuto třídu.
V této třídě pak jednotlivé atributy popíšeme pomocí anotací tak, abychom s nimi mohli v Doctrine2 pracovat.
Přehled anotací najdete <a href="http://docs.doctrine-project.org/en/2.0.x/reference/basic-mapping.html" title="doctrine docs: Basic Mapping"
target="_blank">zde</a>.
Nakonec doplníme standardní metody pro vrácení a nastavení hodnot.
</p> 

<pre>
&lt;?php

namespace pds\BlogBundle\Entity;

use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity
 * @ORM\Table(name="article")
 */
class Article
{

	/**
	 * @ORM\Id
	 * @ORM\Column(type="integer")
	 * @ORM\GeneratedValue(strategy="AUTO")
	 */	
	protected $id;

	/**
	 * @ORM\Column(type="string", length=50)
	 */
	protected $title;

	/**
	 * @ORM\Column(type="text")
	 */
	protected $text;

	/**
	 * @ORM\Column(type="datetime")
	 */
	protected $date;


	public function getId()
	{
		return $this->id;
	}

	public function getTitle()
	{
		return $this->title;
	}

	public function getText()
	{
		return $this->text;
	}

	public function getDate()
	{
		return $this->date;
	}

	public function setTitle($title)
	{
		$this->title = $title;
	}

	public function setText($text)
	{
		$this->text = $text;
	}

	public function setDate($date)
	{
		$this->date = $date;
	}

}
</pre>

<h2>Přehled všech článků &#8211; controller a view</h2>

<p>
Po implementaci entity Article můžeme přistoupit ke zobrazení všech článků. Budeme potřebovat upravit
odpovídající controller a šablonu.
Ve třídě <code>BlogController.php</code> si upravíme metodu <code>indexAction()</code> tak, aby nám vybrala všechny
články uložené v databázi. 
</p>

<pre>
namespace pds\BlogBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;

class BlogController extends Controller
{
    public function indexAction()
    {
        return $this->render('pdsBlogBundle:Blog:index.html.twig', [
            'articles' => $this->getDoctrine()
                ->getRepository('pdsBlogBundle:Article')
                ->findAll()
            ])
        ;
    }
}
</pre>

<p>A nakonec je v šabloně <code>index.html.twig</code> vypíšeme, zároveň tímto také odstraníme předchozí obsah:</p>

<pre>
<?php echo '{'; ?># src/pds/BlogBundle/Resources/views/Blog/index.html.twig #<?php echo '}'; ?>


<?php echo "{"; ?>% extends "pdsBlogBundle::layout.html.twig" %<?php echo "}"; ?>

<?php echo "{"; ?>% block menu %<?php echo "}"; ?>

  &lt;ul&gt;
    &lt;li class="title"&gt;Nejnovější&lt;/li&gt;
    &lt;li&gt;&lt;a href=""&gt;Lorem Ipsum&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=""&gt;De Finibus Bonorum...&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
<?php echo "{"; ?>% endblock %<?php echo "}"; ?>

<?php echo "{"; ?>% block content %<?php echo "}"; ?>

  <?php echo "{"; ?>% for article in articles %<?php echo "}"; ?>

    &lt;div class="article"&gt;
      &lt;h1&gt;<?php echo "{"; ?><?php echo "{"; ?> article.getTitle <?php echo "}"; ?><?php echo "}"; ?>&lt;/h1&gt;
      &lt;p&gt;<?php echo "{"; ?><?php echo "{"; ?> article.getText <?php echo "}"; ?><?php echo "}"; ?> ... &lt;a href="" title=""&gt;celý článek&lt;/a&gt;&lt;/p&gt;
      &lt;p class="date"&gt;Přidáno: <?php echo "{"; ?><?php echo "{"; ?> article.getDate|date('d.m.Y | H:i') <?php echo "}"; ?><?php echo "}"; ?>&lt;/p&gt;
    &lt;/div&gt;
  <?php echo "{"; ?>% endfor %<?php echo "}"; ?>

<?php echo "{"; ?>% endblock %<?php echo "}"; ?>
</pre>

<p>
Všimněte si, že datum ve formátu <code>datetime</code> nemůžeme vypsat jako řetěz, ale musíme použít filtr <code>date()</code>.
Dále se nám u každého článku zobrazuje kompletní text, zatímco by nám stačila jen jeho část.
Provizorně tedy text ořízneme pomocí filtru <code>slice()</code>, později si můžeme doplnit vlastní filtr.
</p>

<pre>
<?php echo '{'; ?># src/pds/BlogBundle/Resources/views/Blog/index.html.twig #<?php echo '}'; ?>


<?php echo '{'; ?># ... #<?php echo '}'; ?>

    &lt;p&gt;<?php echo '{'; ?><?php echo '{'; ?> article.getText|slice(0, 200) <?php echo '}'; ?><?php echo '}'; ?> ... &lt;a href="" title=""&gt;celý&nbsp;článek&lt;/a&gt;&lt;/p&gt;
<?php echo '{'; ?># ... #<?php echo '}'; ?>
</pre>

<p>
Zbývá nám ještě seřadit články sestupně podle data. K tomuto účelu místo metody <code>findAll()</code> využijeme
metodu <code>findBy()</code>, jejíž druhý parametr nám definuje způsob řazení. Funkce <code>indexAction()</code>
ve třídě <code>BlogController.php</code> bude tedy vypadat takto:
</p>

<pre>
// src/pds/BlogBundle/Controller/BlogController.php
//...

public function indexAction()
{
    return $this->render('pdsBlogBundle:Blog:index.html.twig', [
        'articles' => $this->getDoctrine()
            ->getRepository('pdsBlogBundle:Article')
            ->findBy(
                [ ],
                [ 'id' => 'DESC' ]
            )
        ])
    ;
}
</pre>


<h2>Doctrine Query Language &#8211; přehled nejnovějších článků</h2>

<p>Rozhodli jsme se, že si do levé části aplikace ještě umístíme přehled nejnovějších článků, jejich počet si omezíme
na pět. K tomu si sestavíme jednoduchý dotaz pomocí Doctrine Query Language (DQL).
Doplníme si tedy metodu <code>indexAction()</code> v souboru <code>BlogController.php</code>.
</p>

<pre>
// src/pds/BlogBundle/Controller/BlogController.php
//...
	
public function indexAction()
{
    return $this->render('pdsBlogBundle:Blog:index.html.twig', [
        'articles' => $this->getDoctrine()
            ->getRepository('pdsBlogBundle:Article')
            ->findBy(
                [ ],
                [ 'id' => 'DESC' ]
            ),
        'news' => $this->getDoctrine()
            ->getManager()
            ->createQuery('
                SELECT a FROM pdsBlogBundle:Article a ORDER BY a.date DESC    
            ')
            ->setMaxResults(5)
            ->getResult()
        ])
    ;
}
</pre>

<p>A také šablonu <code>index.html.twig</code>.</p>

<pre>
<?php echo '{'; ?># src/pds/BlogBundle/Resources/views/Blog/index.html.twig #<?php echo '}'; ?>


<?php echo "{"; ?>% extends "pdsBlogBundle::layout.html.twig" %<?php echo "}"; ?>

<?php echo "{"; ?>% block menu %<?php echo "}"; ?>

  &lt;ul&gt;
    &lt;li class="title"&gt;Nejnovější&lt;/li&gt;
    <?php echo "{"; ?>% for new in news %<?php echo "}"; ?>      
    &lt;li&gt;&lt;a href=""&gt;<?php echo "{"; ?><?php echo "{"; ?> new.getTitle <?php echo "}"; ?><?php echo "}"; ?>&lt;/a&gt;&lt;/li&gt;
    <?php echo "{"; ?>% endfor %<?php echo "}"; ?>
    
  &lt;/ul&gt;
<?php echo "{"; ?>% endblock %<?php echo "}"; ?>
</pre>

<p>V současné chvíli by nám aplikace měla vypadat takto:</p>

<img src="{$basePath}/images/blog-01.jpg" alt="blog (homepage)" width="600" height="470" class="center" />

<p>
Tímto bychom měli základní výpis článků hotový, nicméně nám ke každému článku zbývá doplnit odkaz, pod kterým
si článek budeme moci prohlédnout a k tomu se dostaneme v další části.
</p>


<h2>Jak zobrazit detail článku</h2>

<p>
Předpokládejme, že budeme chtít, aby článek byl dostupný na url typu:
</p>

<pre>
[nazev_domeny]/article/5
</pre>

<p>
Tímto se dostáváme k otázce <span class="i">routování</span>.
</p>

<h3>Routování</h3>

<p>Nejdříve se podíváme na to, jakým způsobem to funguje. Možná vám při testování routování přijdou vhod tyto odkazy:</p>

<ul>
<li><a href="http://symfony.com/doc/current/book/controller.html" title="symfony.com">Symfony &#8211; Controller</a></li>
<li><a href="http://symfony.com/doc/current/book/routing.html" title="symfony.com">Symfony &#8211; Routing</a></li>
</ul>

<p>
Nejprve si zkusím v <code>BlogControlleru</code> nadefinovat akci „Article“, která bude mít za úkol zobrazit testovací stránku.  
K tomu využiji objekt <code>Response</code>, proto nesmím zapomenout na začátek kódu doplnit příslušnou komponentu.
</p>

<pre>
&lt;?php

namespace Acme\BlogBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Response;

class BlogController extends Controller
{
    //...
    
    public function ArticleAction()
    {
        return new Response('&lt;html&gt;&lt;body&gt;Hello&lt;/body&gt;&lt;/html&gt;');
    }	
}	
</pre>

<p>
Nyní si v souboru <code>BlogBundle/Resources/config/routing.yml</code> doplním požadovanou routu:
</p>

<pre>
pds_blog_article:
    path: /article/
    defaults: { _controller: pdsBlogBundle:Blog:article }
</pre>

<p>
Pokud do prohlížeče zadám url v níže uvedeném tvaru, měla by se nám zobrazit stránka, kterou jsme si nadefinovali v metodě
<code>ArticleAction()</code>.
</p>

<pre>
http://localhost/web/blog/web/app_dev.php/article/
</pre>

<p>Ve stavovém řádku prohlížeče si ještě můžeme zkontrolovat, že se nám vykonala metoda <code>ArticleAction()</code> z&nbsp;
<code>BlogControlleru</code> a název routy.</p>

<h3>Detail článku</h3>

<p>Samotný článek můžeme chápat jako další komponentu, proto veškeré operace, které budeme nad článkem provádět,
umístíme do nového controlleru &#8211; <code>ArticleController</code>.</p>

<pre>
&lt;?php

namespace pds\BlogBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;

class ArticleController extends Controller
{
    public function articleAction($id)
    {
        return $this->render('pdsBlogBundle:Article:article.html.twig', [
            'article' => $this->getDoctrine()
                ->getRepository('pdsBlogBundle:Article')
                ->findOneBy([ 'id' => $id ])
        ]);
    }
}
</pre>

<p>Ve <code>views</code> si vytvoříme nový adresář, který pojmenujeme jako <code>Article</code> a připravíme
    novou šablonu <code>article.html.twig</code>:
</p>

<pre>
<?php echo '{'; ?># src/pds/BlogBundle/Resources/views/Article/article.html.twig #<?php echo '}'; ?>

<?php echo '{'; ?>% extends 'pdsBlogBundle::layout.html.twig' %<?php echo '}'; ?>

<?php echo '{'; ?>% block content %<?php echo '}'; ?>

&lt;div class="article"&gt;
  &lt;h1&gt;<?php echo '{'; ?><?php echo '{'; ?> article.getTitle <?php echo '}'; ?><?php echo '}'; ?>&lt;/h1&gt;
  &lt;p&gt;<?php echo '{'; ?><?php echo '{'; ?> article.getText <?php echo '}'; ?><?php echo '}'; ?>&lt;/p&gt;
  &lt;p class="date"&gt;Přidáno: <?php echo '{'; ?><?php echo '{'; ?> article.getDate|date('d.m.Y | H:i') <?php echo '}'; ?><?php echo '}'; ?>&lt;/p&gt;
&lt;/div&gt;
&lt;div id="comments"&gt;
  &lt;h3&gt;Přidat komentář&lt;/h3&gt;

  &lt;h3&gt;Komentáře:&lt;/h3&gt;
&lt;/div&gt;
<?php echo '{'; ?>% endblock %<?php echo '}'; ?>
</pre>

<p>Nakonec nám zbývá nastavit routu. V souboru <code>BlogBundle/Resources/config/routing.yml</code> upravíme předchozí routu
    s názvem <code>acme_blog_article</code>, protože <span class="i">id</span> článku budeme předávat jako parametr.</p>

<pre>
acme_blog_article:
    path: /article/<?php echo '{'; ?>id<?php echo '}'; ?>

    defaults: { _controller: pdsBlogBundle:Article:article }
</pre>

<p>Když si do prohlížeče zadáme níže uvedenou url, měl by se nám zobrazit náhled článku &#8211; samozřejmě za předpokladu,
že <span class="i">id</span> existuje, pokud ne, skončí požadavek chybou. V ostrém provozu Symfony2 zobrazí uživatelsky
přívětivou chybovou stránku, která bude informovat o tom, že požadovaná stránka neexistuje (500 Internal Server Error).</p>

<pre>
http://localhost/web/blog/web/app_dev.php/article/5
</pre>

<img src="{$basePath}/images/blog-02.jpg" alt="detail článku" width="600" height="198" class="center" />

<p>Zajisté vidíte, že nám v levé části nyní chybí menu. To se pokusíme napravit hned v následující části.</p>
<!--Méně pozitivní zprávou už je to, že co na první
pohled vypadá jako drobný nedostatek, tak pro nás bude znamenat přepsání části kódu. A to proto, že
kód nemáme dobře postaven. K tomu se ovšem dostanu v další části. Zatím si ještě odladíme odkazy.-->


<h3>Úprava menu</h3>
<p>Jak jsme si před chvíli ukázali, menu nefunguje podle našich představ. Proto se nyní podíváme na to,
jakým způsobem můžeme začlenit opakující se úsek kódu do stránky s layoutem. K řešení využijeme
samostatnou šablonu <code>latestArticle.html.twig</code>, kde si nadefinujeme výpis menu
a metodu <code>latestArticleAction()</code> &#8211; viz <span class="i">ArticleController</span>,
které parametrem předáme počet článků. 
</p>
<pre>
// src/pds/BlogBundle/Controller/ArticleController.php

public function latestArticleAction($count)
{
    $articles = $this->getDoctrine()
        ->getManager()
        ->createQuery('
            SELECT a FROM pdsBlogBundle:Article a ORDER BY a.date DESC
        ')
        ->setMaxResults($count)
        ->getResult()
    ;

    return $this->render('pdsBlogBundle:Article:latest.html.twig', [
       'news' => $articles 
    ]);
}
</pre>

<pre>
<?php echo '{'; ?># src/pds/BlogBundle/Resources/views/Article/latest.html.twig #<?php echo '}'; ?>


<?php echo "{"; ?>% block menu %<?php echo "}"; ?>

  &lt;ul&gt;
    &lt;li class="title"&gt;Nejnovější&lt;/li&gt;
    <?php echo "{"; ?>% for new in news %<?php echo "}"; ?>

    &lt;li&gt;&lt;a href=""&gt;<?php echo "{"; ?><?php echo "{"; ?> new.getTitle <?php echo "}"; ?><?php echo "}"; ?>&lt;/a&gt;&lt;/li&gt;
    <?php echo "{"; ?>% endfor %<?php echo "}"; ?>

  &lt;/ul&gt;
<?php echo "{"; ?>% endblock %<?php echo "}"; ?>
</pre>

<p>Po doplnění předchozího kódu můžeme do šablony <code>layout.html.twig</code> doplnit:</p>
<pre>
<?php echo '{'; ?># src/pds/BlogBundle/Resources/views/layout.html.twig #<?php echo '}'; ?>


&lt;div id="left-page"&gt;
<?php echo "{"; ?>% block menu %<?php echo "}"; ?>

  <?php echo "{"; ?><?php echo "{"; ?> render(controller('pdsBlogBundle:Article:latestArticle', <?php echo "{"; ?>'count': 5<?php echo "}"; ?> )) <?php echo "}"; ?><?php echo "}"; ?>

<?php echo "{"; ?>% endblock %<?php echo "}"; ?>

&lt;/div&gt;
</pre>

<p>Voláme tedy akci controlleru <code>latestArticle()</code> pomocí notace <span class="i">bundle : controller : action</span>.
    Nakonec ze souborů <code>BlogController.php</code> a <code>index.html.twig</code> odstraníme duplicitní kód:</p>

<pre>
public function indexAction()
{
    return $this->render('pdsBlogBundle:Blog:index.html.twig', [
        'articles' => $this->getDoctrine()
            ->getRepository('pdsBlogBundle:Article')
            ->findBy(
                [ ],
                [ 'id' => 'DESC' ]
            ),
//            'news' => $this->getDoctrine()
//                ->getManager()
//                ->createQuery('
//                    SELECT a FROM pdsBlogBundle:Article a ORDER BY a.date DESC    
//                ')
//                ->setMaxResults(5)
//                ->getResult()
        ])
    ;
}
</pre>

<pre>
<?php echo '{'; ?># src/pds/BlogBundle/Resources/views/Blog/index.html.twig #<?php echo '}'; ?>


<?php echo "{"; ?>% extends "pdsBlogBundle::layout.html.twig" %<?php echo "}"; ?>

<?php echo "{"; ?>% block content %<?php echo "}"; ?>

  <?php echo "{"; ?>% for article in articles %<?php echo "}"; ?>

    &lt;div class="article"&gt;
      &lt;h1&gt;<?php echo "{"; ?><?php echo "{"; ?> article.getTitle <?php echo "}"; ?><?php echo "}"; ?>&lt;/h1&gt;
      &lt;p&gt;<?php echo "{"; ?><?php echo "{"; ?> article.getText|slice(0, 200) <?php echo "}"; ?><?php echo "}"; ?> ... &lt;a href="" title=""&gt;celý článek&lt;/a&gt;&lt;/p&gt;
      &lt;p class="date"&gt;Přidáno: <?php echo "{"; ?><?php echo "{"; ?> article.getDate|date('d.m.Y | H:i') <?php echo "}"; ?><?php echo "}"; ?>&lt;/p&gt;
    &lt;/div&gt;
  <?php echo "{"; ?>% endfor %<?php echo "}"; ?>

<?php echo "{"; ?>% endblock %<?php echo "}"; ?>
</pre>

<h3>Odkazy v šabloně</h3>

<p>Nyní se podíváme na to, jakým způsobem upravíme jednotlivé odkazy. Pro vytvoření odkazu vyjdeme z&nbsp;názvu routy
    a doplníme <span class="i">id</span> článku. Nejprve si vezmeme odkazy v menu, které máme v souboru
    <code>latest.html.twig</code>:
</p>
<pre>
<?php echo '{'; ?># src/pds/BlogBundle/Resources/views/Article/latest.html.twig #<?php echo '}'; ?>


&lt;li&gt;&lt;a href="<?php echo "{"; ?><?php echo "{"; ?> path('pds_blog_article', <?php echo "{"; ?> 'id': new.getId <?php echo "}"; ?>) <?php echo "}"; ?><?php echo "}"; ?>"&gt;<?php echo "{"; ?><?php echo "{"; ?> new.getTitle <?php echo "}"; ?><?php echo "}"; ?>&lt;/a&gt;&lt;/li&gt;
</pre>


<p>A nesmíme zapomenout ani na odkazy v šabloně <code>index.html.twig</code>, kam přidáme i popisek k atributu <code>title</code>:</p>

<pre>
<?php echo '{'; ?># src/pds/BlogBundle/Resources/views/Blog/index.html.twig #<?php echo '}'; ?>


&lt;p&gt;<?php echo "{"; ?><?php echo "{"; ?> article.getText|slice(0, 200) <?php echo "}"; ?><?php echo "}"; ?> ... &lt;a href="<?php echo "{"; ?><?php echo "{"; ?> path('pds_blog_article',
        <?php echo "{"; ?> 'id': article.getId <?php echo "}"; ?>) <?php echo "}"; ?><?php echo "}"; ?>" title="<?php echo "{"; ?><?php echo "{"; ?> article.getTitle <?php echo "}"; ?><?php echo "}"; ?>"&gt;celý článek&lt;/a&gt;&lt;/p&gt;
</pre>
<p>Navíc si také do šablony <code>article.html.twig</code> přidáme odkaz Zpět.</p>
<pre>
<?php echo '{'; ?># src/pds/BlogBundle/Resources/views/Article/article.html.twig #<?php echo '}'; ?>


&lt;p class="date"&gt;Přidáno: <?php echo "{"; ?><?php echo "{"; ?> article.getDate|date('d.m.Y | H:i') <?php echo "}"; ?><?php echo "}"; ?> &lt;span class="back"&gt;
  &lt;a href="<?php echo "{"; ?><?php echo "{"; ?> path('pds_blog_homepage') <?php echo "}"; ?><?php echo "}"; ?>" title="Zpět"&gt;Zpět&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</pre>

<p>Tady napsat nějaký závěr a komentáře dát jako další část (?)</p>


<h2>Komentáře</h2>

<p>Zdá se, že zobrazení článků nám již funguje tak, jak chceme, a proto se můžeme vrhnout na samotné komentáře.</p>

<h3>Entita a asociace</h3>

<p>Vzhledem k tomu, že i v tomto případě budeme potřebovat databázi, tak práci začneme tím, že si vytvoříme entitu.
Rozdíl oproti předešlému návrhu bude akorát v tom, že v tabulce máme definovaný cizí klíč &#8211; <span class="i">article_id</span>.
Ovšem Doctrine2 pracuje na jiném principu než relační databáze &#8211; svět nemáme popsaný pomocí tabulek, ale pomocí entit
tzn., že pro popis vztahů mezi entitami nebudeme používat cizí klíče tak, jak je známe,
ale pro popis vztahů mezi entitami budeme využívat tzv. asociace, a to podle typu vazeb (1:1, 1:N a M:N).
V našem příkladě si vystačíme s jednoduchou asociací typu 1:N
a použijeme anotaci @ManyToOne (na straně, kde máme definovaný cizí klíč).
Přehled všech typů je uveden v&nbsp;<a href="http://docs.doctrine-project.org/en/latest/reference/association-mapping.html" title="Doctrine2: Association Mapping"
target="_blank">dokumentaci</a>.
</p>

<pre>
&lt;?php

/**
 * @ORM\Entity
 * @ORM\Table(name="comment")
 */
class Comment
{
	/**
	 * @ORM\Id
	 * @ORM\Column(type="integer")
	 * @ORM\GeneratedValue(stategy="AUTO")
	 * @var int
	 */
	protected $id;
	
	/**
	 * @ORM\Column(type="string", length=2500)
	 * @var text
	 */
	protected $text;
	
	/**
	 * @ORM\Column(type="string", length=30)
	 * @var text
	 */
	protected $nickname;
	
	/**
	 * @ORM\Column(type="datetime")
	 * @var datetime
	 */
	protected $date;
	
	/**
	 * @ManyToOne(targetEntity="Article")
	 * @JoinColumn(name="article_id", referencedColumnName="id")
	 * @var int
	 */
	protected $article;
	
	
	public function getId()
	{
		return $this->id;
	}
	
	public function getText()
	{
		return $this->text;
	}
	
	public function getNickname()
	{
		return $this->nickname;
	}
	
	public function getDate()
	{
		return $this->date;
	}
	
	public function getArticle()
	{
		return $this->article;
	}
	
	public function setId($id)
	{
		$this->id = $id;
	}
	
	public function setText($text)
	{
		$this->text = $text;
	}
	
	public function setNickname($nickname)
	{
		$this->nickname = $nickname;
	}
	
	public function setDate($date)
	{
		$this->date = $date;
	}
	
	public function setArticle($article)
	{
		$this->article = $article;
	}	
}
</pre>


<h3>První formulář</h3>
<p>Pro přidání komentáře budeme potřebovat formulář, takže si takový jednoduchý formulář navrhneme.
Pro začátek si vystačíme s definicí v controlleru, později si vytvoříme zvláštní třídu (CommentType.php).</p>



<p>Začneme samotným vykreslením formuláře. Ve složce Acme/BlogBundle si vytvoříme složku Form
a dovnitř si uložíme novou třídu, kterou si pojmenujeme jako CommentType.php.</p>

<pre>

</pre>

<p>Komentář uložíme do databáze.</p>

<pre>

</pre>


<h3>Přehled komentářů</h3>

<p>Nakonec nám zbývá už jenom vypsat uložené komentáře.</p>

<pre>

</pre>




</div>

</div>
{/block}